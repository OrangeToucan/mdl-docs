# -*- coding: utf-8 -*-
#
# mdl-programming-language documentation build configuration file, created by
# sphinx-quickstart on Mon Nov 13 12:04:44 2017.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
import os
import sys
sys.path.insert(0, os.path.abspath('./_util'))

# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.todo',
    # 'sphinxcontrib.inlinesyntaxhighlight',    # breaks :samp:
    'mdl_docs_sphinx',
    'zil_domain',
]

inline_highlight_respect_highlight = True

inline_highlight_literals = False

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'The MDL Programming Language'
copyright = u'2017, TBD'
author = u'TBD'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = u'0.1'
# The full version, including alpha/beta/rc tags.
release = u'0.1'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This patterns also effect to html_static_path and html_extra_path
exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']

# The name of the Pygments (syntax highlighting) style to use.
# pygments_style = 'sphinx'
pygments_style = 'zil_lexer.styles.ZilDocStyle'

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = True

import mdl_docs_sphinx
numfig = True
numfig_format = {
    'section': mdl_docs_sphinx.SectionNumfigFormat(),
    'figure': 'Fig. %s',
    'table': 'Table %s',
    'code-block': 'Listing %s',
}

# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = 'alabaster'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

html_sidebars = {
    '**': [
        'about.html',
        'navigation.html',
        'relations.html',
        'searchbox.html',
        'donate.html',
    ]
}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

rst_prolog = '.. include:: /global.inc'

primary_domain = 'zil'
# default_role = 'zil'

# -- Options for HTMLHelp output ------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'mdl-programming-language'


# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, 'mdl-programming-language.tex', u'The MDL Programming Language',
     u'TBD', 'manual'),
]


# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'mdl-programming-language', u'The MDL Programming Language',
     [author], 1)
]


# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, 'mdl-programming-language', u'The MDL Programming Language',
     author, 'mdl-programming-language', 'One line description of project.',
     'Miscellaneous'),
]

############################

def setup(sphinx):
    from zil_lexer import ZilLexer
    my_zil_lexer = ZilLexer()
    sphinx.add_lexer("mdl", my_zil_lexer)
    sphinx.add_lexer("zil", my_zil_lexer)

    # # The :code: role bypasses sphinx's lexer registry. Enjoy this ugly hack!
    # from pygments import lexers as pyg_lexers
    # wrapped_func = pyg_lexers.get_lexer_by_name
    # def _get_lexer_by_name(alias, **options):
    #     if alias in ('mdl', 'zil'):
    #         return my_zil_lexer
    #     return wrapped_func(alias, **options)
    # pyg_lexers.get_lexer_by_name = _get_lexer_by_name
    #
    # # from sphinx import highlighting as sph_highlighting
    # # sph_highlighting.get_lexer_by_name = _get_lexer_by_name
    #
    # from docutils.utils import code_analyzer as doc_analyzer
    # doc_analyzer.get_lexer_by_name = _get_lexer_by_name
